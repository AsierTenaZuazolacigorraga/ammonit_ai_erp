"""Simplified, deleted all machines and measurements, and get back to simple orders

Revision ID: 98b2f8d19677
Revises: c06f80ebf6f1
Create Date: 2025-01-25 19:31:25.189166

"""

import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "98b2f8d19677"
down_revision = "c06f80ebf6f1"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "order",
        sa.Column(
            "description", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True
        ),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "title", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False
        ),
        sa.Column("owner_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["owner_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_constraint("measurement_owner_id_fkey", "measurement", type_="foreignkey")
    op.drop_constraint("machine_owner_id_fkey", "machine", type_="foreignkey")
    op.drop_constraint("item_owner_id_fkey", "item", type_="foreignkey")
    op.drop_table("machine")
    op.drop_table("measurement")
    op.drop_table("item")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "item",
        sa.Column(
            "description", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("title", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("owner_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["user.id"], name="item_owner_id_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name="item_pkey"),
    )
    op.create_table(
        "measurement",
        sa.Column(
            "timestamp", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "temperature",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "power_usage",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("owner_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["machine.id"],
            name="measurement_owner_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="measurement_pkey"),
    )
    op.create_table(
        "machine",
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "provider", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("owner_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("plc", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "oee",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "oee_availability",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "oee_performance",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "oee_quality",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["user.id"], name="machine_owner_id_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name="machine_pkey"),
    )
    op.drop_table("order")
    # ### end Alembic commands ###
