"""Upgraded orders table

Revision ID: e6643a6382c6
Revises: 6d426230a480
Create Date: 2025-04-22 11:21:07.385219

"""

import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "e6643a6382c6"
down_revision = "6d426230a480"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # First add base_document as nullable
    op.add_column("order", sa.Column("base_document", sa.LargeBinary(), nullable=True))

    # Update existing rows to have a default empty byte array
    op.execute(
        "UPDATE \"order\" SET base_document = '\\x'::bytea WHERE base_document IS NULL"
    )

    # Now make it non-nullable
    op.alter_column("order", "base_document", nullable=False)

    # Add base_document_name as nullable
    op.add_column(
        "order",
        sa.Column(
            "base_document_name",
            sqlmodel.sql.sqltypes.AutoString(length=255),
            nullable=True,
        ),
    )

    # Add date_registered as nullable first
    op.add_column("order", sa.Column("date_registered", sa.DateTime(), nullable=True))

    # Set default value for existing rows to current timestamp
    op.execute(
        'UPDATE "order" SET date_registered = CURRENT_TIMESTAMP WHERE date_registered IS NULL'
    )

    # Now make date_registered non-nullable
    op.alter_column("order", "date_registered", nullable=False)

    # Add remaining nullable columns
    op.add_column("order", sa.Column("date_approved", sa.DateTime(), nullable=True))
    op.add_column("order", sa.Column("is_approved", sa.Boolean(), nullable=True))
    op.add_column(
        "order",
        sa.Column(
            "content_registered",
            sqlmodel.sql.sqltypes.AutoString(length=255),
            nullable=True,
        ),
    )

    # Drop old columns
    op.drop_column("order", "date_utc")
    op.drop_column("order", "date_local")
    op.drop_column("order", "out_document")
    op.drop_column("order", "in_document")
    op.drop_column("order", "out_document_name")
    op.drop_column("order", "in_document_name")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "order",
        sa.Column(
            "in_document_name",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "order",
        sa.Column(
            "out_document_name",
            sa.VARCHAR(length=255),
            server_default=sa.text("''::character varying"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "order",
        sa.Column(
            "in_document", postgresql.BYTEA(), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "order",
        sa.Column(
            "out_document",
            postgresql.BYTEA(),
            server_default=sa.text("'\\x'::bytea"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "order",
        sa.Column(
            "date_local",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "order",
        sa.Column(
            "date_utc",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_column("order", "content_registered")
    op.drop_column("order", "is_approved")
    op.drop_column("order", "date_approved")
    op.drop_column("order", "date_registered")
    op.drop_column("order", "base_document_name")
    op.drop_column("order", "base_document")
    # ### end Alembic commands ###
