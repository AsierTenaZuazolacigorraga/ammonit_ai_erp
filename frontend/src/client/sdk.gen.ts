// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  ItemsReadItemsData,
  ItemsReadItemsResponse,
  ItemsCreateItemData,
  ItemsCreateItemResponse,
  ItemsReadItemData,
  ItemsReadItemResponse,
  ItemsUpdateItemData,
  ItemsUpdateItemResponse,
  ItemsDeleteItemData,
  ItemsDeleteItemResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  MachinesReadMachinesData,
  MachinesReadMachinesResponse,
  MachinesCreateMachineData,
  MachinesCreateMachineResponse,
  MachinesReadMachineData,
  MachinesReadMachineResponse,
  MachinesUpdateMachineData,
  MachinesUpdateMachineResponse,
  MeasurementsReadLatestMeasurementsData,
  MeasurementsReadLatestMeasurementsResponse,
  MeasurementsCreateMeasurementData,
  MeasurementsCreateMeasurementResponse,
  MeasurementsReadMeasurementData,
  MeasurementsReadMeasurementResponse,
  UsersReadUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UtilsHealthCheckResponse,
} from "./types.gen"

export class ItemsService {
  /**
   * Read Items
   * Retrieve items.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns ItemsPublic Successful Response
   * @throws ApiError
   */
  public static readItems(
    data: ItemsReadItemsData = {},
  ): CancelablePromise<ItemsReadItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Item
   * Create new item.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static createItem(
    data: ItemsCreateItemData,
  ): CancelablePromise<ItemsCreateItemResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/items/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Item
   * Get item by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static readItem(
    data: ItemsReadItemData,
  ): CancelablePromise<ItemsReadItemResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Item
   * Update an item.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static updateItem(
    data: ItemsUpdateItemData,
  ): CancelablePromise<ItemsUpdateItemResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Item
   * Delete an item.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteItem(
    data: ItemsDeleteItemData,
  ): CancelablePromise<ItemsDeleteItemResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class MachinesService {
  /**
   * Read Machines
   * Retrieve machines.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns MachinesPublic Successful Response
   * @throws ApiError
   */
  public static readMachines(
    data: MachinesReadMachinesData = {},
  ): CancelablePromise<MachinesReadMachinesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/machines/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Machine
   * Create new machine.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns MachinePublic Successful Response
   * @throws ApiError
   */
  public static createMachine(
    data: MachinesCreateMachineData,
  ): CancelablePromise<MachinesCreateMachineResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/machines/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Machine
   * Get machine by ID.
   * @param data The data for the request.
   * @param data.machineId
   * @returns MachinePublic Successful Response
   * @throws ApiError
   */
  public static readMachine(
    data: MachinesReadMachineData,
  ): CancelablePromise<MachinesReadMachineResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/machines/{machine_id}",
      path: {
        machine_id: data.machineId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Machine
   * Update an machine.
   * @param data The data for the request.
   * @param data.machineId
   * @param data.requestBody
   * @returns MachinePublic Successful Response
   * @throws ApiError
   */
  public static updateMachine(
    data: MachinesUpdateMachineData,
  ): CancelablePromise<MachinesUpdateMachineResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/machines/{machine_id}",
      path: {
        machine_id: data.machineId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class MeasurementsService {
  /**
   * Read Latest Measurements
   * Retrieve measurements.
   * @param data The data for the request.
   * @param data.machineId
   * @returns MeasurementsPublic Successful Response
   * @throws ApiError
   */
  public static readLatestMeasurements(
    data: MeasurementsReadLatestMeasurementsData,
  ): CancelablePromise<MeasurementsReadLatestMeasurementsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/measurements/{machine_id}",
      path: {
        machine_id: data.machineId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Measurement
   * Create new measurement.
   * @param data The data for the request.
   * @param data.machineId
   * @param data.requestBody
   * @returns MeasurementPublic Successful Response
   * @throws ApiError
   */
  public static createMeasurement(
    data: MeasurementsCreateMeasurementData,
  ): CancelablePromise<MeasurementsCreateMeasurementResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/measurements/{machine_id}",
      path: {
        machine_id: data.machineId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Measurement
   * Get measurement by ID.
   * @param data The data for the request.
   * @param data.machineId
   * @param data.measurementId
   * @returns MeasurementPublic Successful Response
   * @throws ApiError
   */
  public static readMeasurement(
    data: MeasurementsReadMeasurementData,
  ): CancelablePromise<MeasurementsReadMeasurementResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/measurements/{machine_id}/{measurement_id}",
      path: {
        machine_id: data.machineId,
        measurement_id: data.measurementId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }
}
