// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { ClientsReadClientsData, ClientsReadClientsResponse, ClientsCreateClientData, ClientsCreateClientResponse, ClientsDeleteClientData, ClientsDeleteClientResponse, ClientsUpdateClientData, ClientsUpdateClientResponse, EmailsReadEmailsData, EmailsReadEmailsResponse, EmailsCreateEmailData, EmailsCreateEmailResponse, EmailsCreateOutlookTokenStep1Data, EmailsCreateOutlookTokenStep1Response, EmailsCreateOutlookTokenStep2Data, EmailsCreateOutlookTokenStep2Response, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, OrdersReadOrdersData, OrdersReadOrdersResponse, OrdersCreateOrderData, OrdersCreateOrderResponse, OrdersReadOrderData, OrdersReadOrderResponse, OrdersDeleteOrderData, OrdersDeleteOrderResponse, OrdersApproveOrderData, OrdersApproveOrderResponse, OrdersUpdateOrderErpStateData, OrdersUpdateOrderErpStateResponse, UsersReadUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUsersData, UsersReadUsersResponse, UsersReadUserData, UsersReadUserResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsHealthCheckResponse } from './types.gen';

export class ClientsService {
    /**
     * Read Clients
     * Retrieve clients.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ClientsPublic Successful Response
     * @throws ApiError
     */
    public static readClients(data: ClientsReadClientsData = {}): CancelablePromise<ClientsReadClientsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/clients/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Client
     * Create new client.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ClientPublic Successful Response
     * @throws ApiError
     */
    public static createClient(data: ClientsCreateClientData): CancelablePromise<ClientsCreateClientResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/clients/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Client
     * Delete an client.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteClient(data: ClientsDeleteClientData): CancelablePromise<ClientsDeleteClientResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/clients/{id}/',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Client
     * Update a client.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ClientPublic Successful Response
     * @throws ApiError
     */
    public static updateClient(data: ClientsUpdateClientData): CancelablePromise<ClientsUpdateClientResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/clients/{id}/',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class EmailsService {
    /**
     * Read Emails
     * Retrieve emails.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns EmailsPublic Successful Response
     * @throws ApiError
     */
    public static readEmails(data: EmailsReadEmailsData = {}): CancelablePromise<EmailsReadEmailsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/emails/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Email
     * Create new email.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns EmailPublic Successful Response
     * @throws ApiError
     */
    public static createEmail(data: EmailsCreateEmailData): CancelablePromise<EmailsCreateEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/emails/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Outlook Token Step 1
     * Create outlook token step 1.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Successful Response
     * @throws ApiError
     */
    public static createOutlookTokenStep1(data: EmailsCreateOutlookTokenStep1Data): CancelablePromise<EmailsCreateOutlookTokenStep1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/emails/outlook-token-step-1/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Outlook Token Step 2
     * Create outlook token step 2.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Successful Response
     * @throws ApiError
     */
    public static createOutlookTokenStep2(data: EmailsCreateOutlookTokenStep2Data): CancelablePromise<EmailsCreateOutlookTokenStep2Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/emails/outlook-token-step-2/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token/',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class OrdersService {
    /**
     * Read Orders
     * Retrieve orders.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns OrdersPublic Successful Response
     * @throws ApiError
     */
    public static readOrders(data: OrdersReadOrdersData = {}): CancelablePromise<OrdersReadOrdersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/orders/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Order
     * Create an order.
     * @param data The data for the request.
     * @param data.formData
     * @returns OrderPublic Successful Response
     * @throws ApiError
     */
    public static createOrder(data: OrdersCreateOrderData): CancelablePromise<OrdersCreateOrderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/orders/',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Order
     * Get order by id.
     * @param data The data for the request.
     * @param data.id
     * @returns OrderPublic Successful Response
     * @throws ApiError
     */
    public static readOrder(data: OrdersReadOrderData): CancelablePromise<OrdersReadOrderResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/orders/{id}/',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Order
     * Delete an order.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteOrder(data: OrdersDeleteOrderData): CancelablePromise<OrdersDeleteOrderResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/orders/{id}/',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Approve Order
     * Approve an order.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns OrderPublic Successful Response
     * @throws ApiError
     */
    public static approveOrder(data: OrdersApproveOrderData): CancelablePromise<OrdersApproveOrderResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/orders/approve/{id}/',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Order Erp State
     * Update ERP state of an order.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns OrderPublic Successful Response
     * @throws ApiError
     */
    public static updateOrderErpState(data: OrdersUpdateOrderErpStateData): CancelablePromise<OrdersUpdateOrderErpStateResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/orders/update_erp_state/{id}/',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me/'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.id
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUser(data: UsersReadUserData): CancelablePromise<UsersReadUserResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{id}/',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{id}/',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{id}/',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}