##################################################################
# Services
##################################################################

services:

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: backend/Dockerfile
    restart: always
    ports:
      - 8000:8000

  nginx:
    container_name: nginx
    image: nginx
    restart: always
    environment:
      DOMAIN: ${WEB_DOMAIN}
    volumes:
      - ./certs:/etc/letsencrypt
      - ./certs-data:/data/letsencrypt
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template
    entrypoint: /bin/bash -c "envsubst '$$DOMAIN' < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf && nginx -g 'daemon off;'"
    ports:
      - 80:80
      - 443:443
    depends_on:
      - certbot

  certbot:
    container_name: certbot
    image: certbot/certbot:v2.6.0
    restart: always
    volumes:
      - ./certs:/etc/letsencrypt
      - ./certs-data:/data/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h; done'"

  database:
    container_name: database
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - 3306:3306
    volumes:
      - ./mysql-data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d

  broker:
    container_name: broker
    image: eclipse-mosquitto:2.0.20
    restart: always
    environment:
      - TZ=Europe/Madrid
    volumes:
      - ./broker/config:/mosquitto/config
      - ./broker/data:/mosquitto/data
      - ./broker/log:/mosquitto/log
    networks:
      - internal
    ports:
      - 1884:1884
    entrypoint: [ "/docker-entrypoint.sh" ]
    command: [ "/usr/sbin/mosquitto", "-c", "/mosquitto/config/mosquitto.conf" ]

  subscriber:
    container_name: subscriber
    build:
      context: .
      dockerfile: subscriber/Dockerfile
    restart: always
    environment:
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
    networks:
      - internal
    ports:
      - 1885:1884
    depends_on:
      - broker

  publisher:
    container_name: publisher
    build:
      context: .
      dockerfile: publisher/Dockerfile
    restart: always
    ports:
      - 1884:1884

##################################################################
# Networks
##################################################################

networks:

  internal:
    driver: bridge
